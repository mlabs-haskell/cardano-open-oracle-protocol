syntax = "proto3";

import "google/protobuf/empty.proto";

package coop;

service Publisher {
  // Create a Fact Statement minting transaction (FSMintTx)
  rpc createFsMintTransaction(CreateFsMintTransactionRequest) returns (CreateFsMintTransactionResponse) {}
  // Create a Fact Statement burning transaction (FSBurnTx)
  rpc createFsBurnTransaction(CreateFsBurnTransactionRequest) returns (CreateFsBurnTransactionResponse) {}
}

service Collector {
  // Fetch a Fact Statement with a given ID
  rpc getFactStatement(GetFactStatementRequest) returns (GetFactStatementResponse) {}
}

message GetFactStatementRequest {
  repeated FactStatementId fs_ids = 1;
}

message GetFactStatementResponse {
  message FSById {
    map<FactStatementId, FactStatement> value = 1;
  }
  oneof factStatementsOrErr {
    // Fetched Fact Statements
    FSById fs_by_id = 1;
    // Error encountered when servicing the request
    Error error = 2;
  }
}

message CreateFsMintTransactionRequest {
  message FsParams {
    // Fact statement identifier
    FactStatementId fs_id = 1;
    // Extended ledger time after which the created FSUTxO can be spent by the submitter
    ExtendedLedgerTime gcAfter = 2;
  }

  // A list of fact statements to mint along with their ttl
  repeated FsParams fs_params = 1;
  // The PubKeyHash of the user that will submit the transaction
  PubKeyHash submitter  = 2;
  // Submitter owned UTxO to use as a collateral UTxO in the returned FSMintTx
  UTxORef collateral = 3;
  // Submitter owned UTxO that contains the $FEE tokens requested by the publisher
  UTxORef fee = 4;
}

message Error {
  message NotFoundError {
    // Fact Statement ID that wasn't found
    FactStatementId fs_id = 1;
  }
  message TimeoutError {
    // Timeout error message
    string msg = 1;
  }
  message OtherError {
    // Some other error message
    string msg = 1;
  }
  oneof someError {
    // Fact Statement ID wasn't found
    NotFoundError not_found_err = 1;
    // Timeout error
    TimeoutError timeout_err = 2;
    // Some other error
    OtherError other_err = 3;
  }
}

message CreateFsMintTransactionResponse {
  oneof transactionOrErr {
    // Fact Statement Minting transaction (abbr. FSMintTx) to sign and submit
    Transaction fs_mint_tx = 1;
    // Error encountered when servicing the request
    Error error = 2;
  }
}

message CreateFsBurnTransactionRequest {
  // User provided FSUTxOs to spend
  repeated UTxORef fs = 1;
  // The PubKeyHash of the user that submitted the FSMintTx and will also submit the FSBurnTx
  PubKeyHash submitter  = 2;
  // Submitter owned UTxO to use as a collateral UTxO in the returned FSBurnTx
  UTxORef collateral = 3;
}

message CreateFsBurnTransactionResponse {
  oneof transactionOrErr {
    // Fact Statement Burning transaction (abbr. FSBurnTx) to sign and submit
    Transaction fs_burn_tx = 1;
    // Error encountered when servicing the request
    Error error = 2;
  }
}
