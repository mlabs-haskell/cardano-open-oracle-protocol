{-# LANGUAGE CPP #-}

module Coop.Types (
  CoopPlutus (..),
  CoopDeployment (..),
  FsMpParams (..),
  FsMpRedeemer (..),
  FactStatement (),
  FactStatementId (),
  FsDatum (..),
  CertDatum (..),
  AuthParams (..),
  AuthMpParams (..),
  AuthMpRedeemer (..),
  CertMpParams (..),
  CertMpRedeemer (..),
  AuthBatchId,
  AuthDeployment (..),
  CoopState (..),
) where

import Control.Lens (makeFields)
import Coop.PlutusOrphans ()
import Data.Aeson (FromJSON, ToJSON)
import Data.Typeable (Typeable)
import GHC.Generics (Generic)
import PlutusTx qualified

#ifdef NEW_LEDGER_NAMESPACE
import PlutusLedgerApi.V2 (Script, LedgerBytes, CurrencySymbol, Address, Validator, MintingPolicy, POSIXTime, Extended, POSIXTimeRange, PubKeyHash, BuiltinData)
import PlutusLedgerApi.V1.Value (AssetClass)
#else
import Plutus.V2.Ledger.Api (Script, LedgerBytes, CurrencySymbol, Address, Validator, MintingPolicy, POSIXTime, Extended, POSIXTimeRange, PubKeyHash, BuiltinData)
import Plutus.V1.Ledger.Value (AssetClass)
#endif

-- * COOP offchain types

-- | Plutus scripts as generated by `coop-plutus-cli compile` command
data CoopPlutus = CoopPlutus
  { cp'mkOneShotMp :: Script
  -- ^ Makes the $ONE-SHOT minting policy `:: Integer -> TokenName -> TxOutRef -> MintingPolicy`
  , cp'mkAuthMp :: Script
  -- ^ Makes the $AUTH minting policy `:: AuthMpParams -> MintingPolicy`
  , cp'mkCertMp :: Script
  -- ^ Makes the $CERT minting policy `:: CertMpParams -> MintingPolicy`
  , cp'certV :: Script
  -- ^ Certificate validator @CertV `:: Validator``
  , cp'mkFsMp :: Script
  -- ^ Makes the $FS minting policy `:: FsMpParams -> MintingPolicy`
  , cp'fsV :: Script
  -- ^ Fact Statement validator @FsV `:: Validator`
  }
  deriving stock (Show, Eq, Generic)
  deriving anyclass (ToJSON, FromJSON)

-- | COOP deployment (per oracle)
data CoopDeployment = CoopDeployment
  { cd'coopAc :: AssetClass
  -- ^ $COOP one-shot token denoting the COOP deployment
  , cd'fsMp :: MintingPolicy
  -- ^ Deployed COOP Fact Statement minting policy
  , cd'fsV :: Validator
  -- ^ Deployed COOP Fact Statement validator
  , cd'auth :: AuthDeployment
  -- ^ Deployed COOP authentication deployment
  }
  deriving stock (Show, Eq, Generic)
  deriving anyclass (ToJSON, FromJSON)

-- | COOP state
data CoopState = CoopState
  { cs'certificates :: [CertDatum]
  -- ^ COOP certificate datums attached at @CertV with $CERT datums
  , cs'factStatements :: [FsDatum]
  -- ^ COOP fact statement datums attached at @FsV with $FS datums
  }
  deriving stock (Show, Eq, Generic)
  deriving anyclass (ToJSON, FromJSON)

-- * COOP Plutus (on-chain) types

-- | A fact statement is just Plutus Data
type FactStatement = BuiltinData

-- | A fact statement ID is just bytes
type FactStatementId = LedgerBytes

-- | A datum holding the FactStatement that's locked at @FsV
data FsDatum = FsDatum
  { fd'fs :: FactStatement
  -- ^ Fact statement
  , fd'fsId :: FactStatementId
  -- ^ Fact statement ID as provided by the oracle
  , fs'gcAfter :: Extended POSIXTime
  -- ^ After this time the Submitter can 'garbage collect' the @FsV UTxO
  , fs'submitter :: PubKeyHash
  -- ^ Public key hash of the wallet that submitted the $FS minting transaction
  }
  deriving stock (Show, Generic, Eq)
  deriving anyclass (ToJSON, FromJSON)

-- | FsMp initial parameters
data FsMpParams = FsMpParams
  { fmp'coopAc :: AssetClass
  -- ^ $COOP one-shot token asset class denoting the COOP instance
  , fmp'fsVAddress :: Address
  -- ^ @FsV fact statement validator address where the minted $FS tokens are paid to
  , fmp'authParams :: AuthParams
  -- ^ Authentication parameters
  }
  deriving stock (Show, Generic, Eq, Typeable)
  deriving anyclass (ToJSON, FromJSON)

-- | FsMp initial authentication parameters
data AuthParams = AuthParams
  { ap'authTokenCs :: CurrencySymbol
  -- ^ $AUTH token CurrencySymbol required to authorize $FS minting
  , ap'certTokenCs :: CurrencySymbol
  -- ^ $CERT token CurrencySymbol required to authorize $FS minting
  }
  deriving stock (Show, Generic, Eq)
  deriving anyclass (ToJSON, FromJSON)

-- | FsMp redeemer denoting $FS mint or burning actions
data FsMpRedeemer = FsMpBurn | FsMpMint
  deriving stock (Show, Generic, Eq, Typeable)
  deriving anyclass (ToJSON, FromJSON)

-- ** COOP Authentication

-- | COOP Authentication deployment
data AuthDeployment = AuthDeployment
  { ad'authorityAc :: AssetClass
  -- ^ Authentication authority asset class $AA that can authorize minting $AUTH and $CERT tokens
  , ad'certV :: Validator
  -- ^ @CertV Certificate validator holding $CERTs and CertDatums
  , ad'certMp :: MintingPolicy
  -- ^ Minting policy for $CERT tokens
  , ad'authMp :: MintingPolicy
  -- ^ Minting policy ofr $AUTH tokens
  }
  deriving stock (Show, Generic, Eq, Typeable)
  deriving anyclass (ToJSON, FromJSON)

-- | Authentication batch identifier (certificates + authentication tokens)
type AuthBatchId = LedgerBytes

-- | Datum locked at @CertV containing information about $AUTH tokens used in authorizing $FS minting
data CertDatum = CertDatum
  { cert'id :: AuthBatchId
  -- ^ Certificate unique identifier (matches $CERT and $AUTH token names)
  , cert'validity :: POSIXTimeRange
  -- ^ Certificate validity interval after which associated $AUTH tokens can't be used to authorize $FS minting
  , cert'redeemerAc :: AssetClass
  -- ^ $CERT-RMDR asset class that must be spent to 'garbage collect' the @CertV UTxO after the certificate had expired
  }
  deriving stock (Show, Generic, Eq)
  deriving anyclass (ToJSON, FromJSON)

-- | CertMp redeemer denoting $CERT mint or burning actions
data CertMpRedeemer = CertMpBurn | CertMpMint
  deriving stock (Show, Generic, Eq, Typeable)
  deriving anyclass (ToJSON, FromJSON)

-- | CertMp initial parameters
data CertMpParams = CertMpParams
  { cmp'authAuthorityAc :: AssetClass
  -- ^ $AA (Authentication authority) tokens required to authorize $CERT minting
  , cmp'requiredAtLeastAaQ :: Integer
  -- ^ $AA token quantity required to authorize $CERT minting
  , cmp'certVAddress :: Address
  -- ^ Certificate validator @CertV address to pay the $CERT tokens to
  }
  deriving stock (Show, Generic, Eq)
  deriving anyclass (ToJSON, FromJSON)

-- | AuthMp redeemer denoting $AUTH mint or burning actions
data AuthMpRedeemer = AuthMpBurn | AuthMpMint
  deriving stock (Show, Generic, Eq, Typeable)
  deriving anyclass (ToJSON, FromJSON)

-- | AuthMp initial parameters
data AuthMpParams = AuthMpParams
  { amp'authAuthorityAc :: AssetClass
  -- ^ $AA (Authentication authority) tokens required to authorize $AUTH minting
  , amp'requiredAtLeastAaQ :: Integer
  -- ^ $AA token quantity required to authorize $AUTH minting
  }
  deriving stock (Show, Generic, Eq)
  deriving anyclass (ToJSON, FromJSON)

-- | Plutus ToData/FromData instances
PlutusTx.unstableMakeIsData ''CertDatum
PlutusTx.unstableMakeIsData ''AuthParams
PlutusTx.unstableMakeIsData ''CertMpParams
PlutusTx.unstableMakeIsData ''CertMpRedeemer
PlutusTx.unstableMakeIsData ''AuthMpParams
PlutusTx.unstableMakeIsData ''AuthMpRedeemer

PlutusTx.unstableMakeIsData ''FsMpParams
PlutusTx.unstableMakeIsData ''FsDatum
PlutusTx.unstableMakeIsData ''FsMpRedeemer

-- | Lenses
makeFields ''CoopPlutus
makeFields ''CoopDeployment
makeFields ''FsMpParams
makeFields ''FsDatum
makeFields ''FsMpRedeemer

makeFields ''AuthDeployment
makeFields ''CertDatum
makeFields ''AuthParams
makeFields ''CertMpParams
makeFields ''CertMpRedeemer
makeFields ''AuthMpParams
makeFields ''AuthMpRedeemer
